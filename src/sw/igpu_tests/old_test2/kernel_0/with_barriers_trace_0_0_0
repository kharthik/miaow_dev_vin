 s_movk_i32    s8, 0x0000                                  // 00000000: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00200000                              // 00000004: BE8903FF 00200000
S9<=(2097152) 

 s_movk_i32    s7, 0x0021                                  // 0000000C: B0070021
S7<=(33) 

 s_buffer_load_dwordx2  s[6:7], s[8:11], s7                // 00000010: C2430807
S6<=(33)(1668552918,4.5028e+21f) S7<=(37)(1266191750,1.62892e+07f) 

 s_mov_b32     s2, s5                                      // 00000014: BE820305
S2<=(36) 

 v_lshrrev_b32  v1, v17, v17                               // 00000018: 2C022311
t0: V1<=(0) 

 v_mul_i32_i24  v4, v11, v16                               // 0000001C: 1208210B
t0: V4<=(0) 

 s_and_b32     s2, s6, s7                                  // 00000020: 87020706
S2<=(1131415686) scc<=(1) 

 v_cmp_le_u32  vcc, v14, v16                               // 00000024: 7D86210E
wf_id0: vcc<=(1) 

 v_add_i32     v2, vcc, v11, v12                           // 00000028: 4A04190B
t0: V2<=(0) wf_id0: vcc<=(0) 

 s_branch      label_000C                                  // 0000002C: BF820000


 s_mov_b32     s0, s6                                      // 00000030: BE800306
S0<=(1668552918) 

 s_mov_b32     s4, s7                                      // 00000034: BE840307
S4<=(1266191750) 

 s_mov_b32     s3, s6                                      // 00000038: BE830306
S3<=(1668552918) 

 s_mov_b32     s1, s9                                      // 0000003C: BE810309
S1<=(2097152) 

 s_mov_b32     s0, s7                                      // 00000040: BE800307
S0<=(1266191750) 

 s_cmp_eq_i32  s3, s9                                      // 00000044: BF000903
scc<=(0) 

 s_movk_i32    s8, 0x0000                                  // 00000048: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x000e0000                              // 0000004C: BE8903FF 000E0000
S9<=(917504) 

 s_movk_i32    s8, 0x000a                                  // 00000054: B008000A
S8<=(10) 

 s_buffer_load_dword  s7, s[8:11], 0x08                    // 00000058: C2038908
S7<=(42)(39541406,1.61156e-37f)

 v_lshrrev_b32  v1, s6, v10                                // 0000005C: 2C021406
t0: V1<=(0) 

 s_cmp_ge_u32  s0, s9                                      // 00000060: BF090900
scc<=(1) 

 s_not_b32     s3, s7                                      // 00000064: BE830707
S3<=(-39541407) scc<=(1) 

 v_cmp_gt_f32  vcc, s8, v19                                // 00000068: 7C082608
wf_id0: vcc<=(1) 

 s_movk_i32    s4, 0x0000                                  // 0000006C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00a4                                  // 00000070: B00500A4
S5<=(164) 

 s_movk_i32    s6, 0x0000                                  // 00000074: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000078: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x0000002e                              // 0000007C: 7E0802FF 0000002E
t0: V4<=(46) 

 s_movk_i32    s7, 0x0001                                  // 00000084: B0070001
S7<=(1) 

 tbuffer_load_format_x  v19, v4, s[4:7], s7 offen offset:33 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000088: E8201021 07011304
t0: V19<=(46)(-514127094,-2.5254e+20f) 

 s_not_b32     s3, s5                                      // 00000090: BE830705
S3<=(-165) scc<=(1) 

 s_or_b32      s1, s5, s9                                  // 00000094: 88010905
S1<=(917668) scc<=(1) 

 v_mov_b32     v1, v15                                     // 00000098: 7E02030F
t0: V1<=(0) 

 v_add_i32     v1, vcc, v15, v15                           // 0000009C: 4A021F0F
t0: V1<=(0) wf_id0: vcc<=(0) 

 s_branch      label_002B                                  // 000000A0: BF820002


 s_mov_b32     s1, s8                                      // 000000AC: BE810308
S1<=(10) 

 s_mov_b32     s1, s7                                      // 000000B0: BE810307
S1<=(1) 

 s_mov_b32     s4, s9                                      // 000000B4: BE840309
S4<=(917504) 

 v_add_i32     v2, vcc, v15, v15                           // 000000B8: 4A041F0F
t0: V2<=(0) wf_id0: vcc<=(0) 

 s_branch      label_0030                                  // 000000BC: BF820000


 s_mov_b32     s0, s5                                      // 000000C0: BE800305
S0<=(164) 

 s_mov_b32     s3, s7                                      // 000000C4: BE830307
S3<=(1) 

 s_mov_b32     s1, s9                                      // 000000C8: BE810309
S1<=(917504) 

 s_mov_b32     s1, s5                                      // 000000CC: BE810305
S1<=(164) 

 s_mov_b32     s1, s5                                      // 000000D0: BE810305
S1<=(164) 

 s_or_b32      s0, s8, s6                                  // 000000D4: 88000608
S0<=(10) scc<=(1) 

 s_add_i32     s0, s6, s6                                  // 000000D8: 81000606
S0<=(0) scc<=(0) 

 v_add_i32     v7, vcc, s8, v10                            // 000000DC: 4A0E1408
t0: V7<=(10) wf_id0: vcc<=(0) 

 s_cbranch_scc0  label_003C                                // 000000E0: BF840003


 s_mov_b32     s1, s6                                      // 000000F0: BE810306
S1<=(0) 

 s_mov_b32     s2, s5                                      // 000000F4: BE820305
S2<=(164) 

 v_add_i32     v3, vcc, s8, v10                            // 000000F8: 4A061408
t0: V3<=(10) wf_id0: vcc<=(0) 

 s_cbranch_scc1  label_0040                                // 000000FC: BF850000


 s_mov_b32     s2, s6                                      // 00000100: BE820306
S2<=(0) 

 s_mov_b32     s3, s7                                      // 00000104: BE830307
S3<=(1) 

 s_mov_b32     s3, s8                                      // 00000108: BE830308
S3<=(10) 

 s_mov_b32     s0, s6                                      // 0000010C: BE800306
S0<=(0) 

 s_mov_b32     s2, s7                                      // 00000110: BE820307
S2<=(1) 

 v_or_b32      v8, s6, v19                                 // 00000114: 38102606
t0: V8<=(-514127094) 

 v_cmp_gt_u32  vcc, s7, v11                                // 00000118: 7D881607
wf_id0: vcc<=(1) 

 v_lshlrev_b32  v4, s8, v10                                // 0000011C: 34081408
t0: V4<=(0) 

 s_lshl_b32    s4, s9, s8                                  // 00000120: 8F040809
S4<=(939524096) scc<=(1) 

 s_ashr_i32    s3, s7, s9                                  // 00000124: 91030907
S3<=(1) scc<=(1) 

 v_add_i32     v7, vcc, v18, v12                           // 00000128: 4A0E1912
t0: V7<=(0) wf_id0: vcc<=(0) 

 s_waitcnt     vmcnt(3) & lgkmcnt(0) & expcnt(0)           // 0000012C: BF8C0003


 s_mov_b32     s4, s6                                      // 00000130: BE840306
S4<=(0) 

 s_mov_b32     s2, s8                                      // 00000134: BE820308
S2<=(10) 

 s_mov_b32     s3, s6                                      // 00000138: BE830306
S3<=(0) 

 s_mov_b32     s4, s8                                      // 0000013C: BE840308
S4<=(10) 

 s_mov_b32     s1, s9                                      // 00000140: BE810309
S1<=(917504) 

 v_mul_i32_i24  v4, s5, v14                                // 00000144: 12081C05
t0: V4<=(0) 

 s_movk_i32    s8, 0x0000                                  // 00000148: B0080000
S8<=(0) 

 s_movk_i32    s9, 0x0028                                  // 0000014C: B0090028
S9<=(40) 

 s_movk_i32    s10, 0x0000                                 // 00000150: B00A0000
S10<=(0) 

 s_movk_i32    s11, 0x0000                                 // 00000154: B00B0000
S11<=(0) 

 v_mov_b32     v9, 0x00000026                              // 00000158: 7E1202FF 00000026
t0: V9<=(38) 

 s_movk_i32    s5, 0x0029                                  // 00000160: B0050029
S5<=(41) 

 tbuffer_load_format_x  v13, v9, s[8:11], s5 idxen offset:34 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000164: E8202022 05020D09
t0: V13<=(34)(-2040302568,-4.27792e-35f) 

 s_movk_i32    s4, 0x0000                                  // 0000016C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00ac                                  // 00000170: B00500AC
S5<=(172) 

 s_movk_i32    s6, 0x0000                                  // 00000174: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000178: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x00000017                              // 0000017C: 7E0802FF 00000017
t0: V4<=(23) 

 s_movk_i32    s7, 0x0023                                  // 00000184: B0070023
S7<=(35) 

 tbuffer_load_format_xyzw  v[12:15], v4, s[4:7], s7 idxen offset:44 format:[BUF_DATA_FORMAT_32_32_32_32,BUF_NUM_FORMAT_UNORM] // 00000188: E873202C 07010C04
t0: V12<=(44)(185205339,2.65796e-32f) t0: V13<=(48)(-2127765157,-3.17531e-38f) t0: V14<=(52)(1178266460,11962.8f) t0: V15<=(56)(1896704110,7.00218e+29f) 

 s_waitcnt     vmcnt(0) & lgkmcnt(0) & expcnt(0)           // 00000190: BF8C0000


 v_cndmask_b32  v0, s7, v10, vcc                           // 00000194: 00001407
t0: V0<=(35) 

 s_sub_i32     s2, s7, s5                                  // 00000198: 81820507
S2<=(-137) scc<=(0) 

 s_movk_i32    s4, 0x0000                                  // 0000019C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00b0                                  // 000001A0: B00500B0
S5<=(176) 

 s_movk_i32    s6, 0x0000                                  // 000001A4: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 000001A8: B0070000
S7<=(0) 

 v_mov_b32     v1, 0x00000002                              // 000001AC: 7E0202FF 00000002
t0: V1<=(2) 

 s_movk_i32    s9, 0x0008                                  // 000001B4: B0090008
S9<=(8) 

 tbuffer_load_format_x  v18, v1, s[4:7], s9 offen offset:39 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 000001B8: E8201027 09011201
t0: V18<=(2)(-1926628425,-5.23801e-31f) 

 v_cndmask_b32  v7, s6, v15, vcc                           // 000001C0: 000E1E06
t0: V7<=(0) 

 s_movk_i32    s6, 0x0000                                  // 000001C4: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00130000                              // 000001C8: BE8703FF 00130000
S7<=(1245184) 

 s_movk_i32    s9, 0x0013                                  // 000001D0: B0090013
S9<=(19) 

 s_buffer_load_dword  s8, s[6:9], s9                       // 000001D4: C2040609
S8<=(19)(-1082448351,-0.981051f)

 v_cmp_eq_i32  vcc, s6, v10                                // 000001D8: 7D041406
wf_id0: vcc<=(1) 

 v_add_i32     v6, vcc, v12, v18                           // 000001DC: 4A0C250C
t0: V6<=(-1741423086) wf_id0: vcc<=(0) 

 v_add_i32     v6, vcc, v10, v19                           // 000001E0: 4A0C270A
t0: V6<=(-514127094) wf_id0: vcc<=(0) 

 s_cbranch_scc0  label_007B                                // 000001E4: BF840001


 s_mov_b32     s2, s8                                      // 000001EC: BE820308
S2<=(-1082448351) 

 s_mov_b32     s1, s9                                      // 000001F0: BE810309
S1<=(19) 

 s_mov_b32     s2, s6                                      // 000001F4: BE820306
S2<=(0) 

 s_mov_b32     s2, s7                                      // 000001F8: BE820307
S2<=(1245184) 

 v_mov_b32     v6, s8                                      // 000001FC: 7E0C0208
t0: V6<=(-1082448351) 

 s_not_b32     s1, s7                                      // 00000200: BE810707
S1<=(-1245185) scc<=(1) 

 v_cmp_ne_i32  vcc, s6, v18                                // 00000204: 7D0A2406
wf_id0: vcc<=(1) 

 v_mul_f32     v5, s8, v14                                 // 00000208: 100A1C08
t0: V5<=(-11736.2f) 

 v_lshlrev_b32  v2, s9, v15                                // 0000020C: 34041E09
t0: V2<=(1131413504) 

 s_and_saveexec_b64  s[0:1], s[6:7]                        // 00000210: BE802406
S0<=(1) S1<=(0) exec_lo<=(0) exec_hi<=(0) scc<=(0) 

 v_mov_b32     v2, v17                                     // 00000214: 7E040311


 v_cndmask_b32  v5, v12, v17, vcc                          // 00000218: 000A230C


 s_mulk_i32    s3, 0x0004                                  // 0000021C: B8030004
S3<=(0) scc<=(0) 

 s_sub_i32     s0, s5, s9                                  // 00000220: 81800905
S0<=(157) scc<=(0) 

 s_lshl_b32    s1, s6, s5                                  // 00000224: 8F010506
S1<=(0) scc<=(0) 

 s_add_u32     s1, s8, s6                                  // 00000228: 80010608
S1<=(-1082448351) scc<=(0) 

 s_not_b32     s1, s8                                      // 0000022C: BE810708
S1<=(1082448350) scc<=(1) 

 v_lshlrev_b32  v0, s7, v17                                // 00000230: 34002207


 v_cmp_gt_f32  vcc, s7, v14                                // 00000234: 7C081C07


 v_add_i32     v9, vcc, s8, v14                            // 00000238: 4A121C08


 s_cbranch_scc1  label_0091                                // 0000023C: BF850001


 s_mov_b32     s3, s9                                      // 00000244: BE830309
S3<=(19) 

 s_mov_b32     s0, s9                                      // 00000248: BE800309
S0<=(19) 

 s_mov_b32     s0, s9                                      // 0000024C: BE800309
S0<=(19) 

 s_mov_b32     s1, s9                                      // 00000250: BE810309
S1<=(19) 

 s_cmp_ge_u32  s0, s7                                      // 00000254: BF090700
scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 00000258: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00220000                              // 0000025C: BE8703FF 00220000
S7<=(2228224) 

 s_movk_i32    s7, 0x001c                                  // 00000264: B007001C
S7<=(28) 

 s_buffer_load_dword  s8, s[6:9], s7                       // 00000268: C2040607
S8<=(28)(488612098,2.11267e-21f)

 v_cndmask_b32  v2, v11, v12, vcc                          // 0000026C: 0004190B


 s_lshl_b32    s0, s5, s6                                  // 00000270: 8F000605
S0<=(176) scc<=(1) 

 s_mulk_i32    s0, 0x0002                                  // 00000274: B8000002
S0<=(352) scc<=(0) 

 s_min_u32     s3, s7, s8                                  // 00000278: 83830807
S3<=(28) scc<=(1) 

 s_movk_i32    s4, 0x0000                                  // 0000027C: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x002a0000                              // 00000280: BE8503FF 002A0000
S5<=(2752512) 

 s_movk_i32    s6, 0x0026                                  // 00000288: B0060026
S6<=(38) 

 s_buffer_load_dword  s5, s[4:7], s6                       // 0000028C: C2028406
S5<=(38)(1061910669,0.794808f)

 v_sub_f32     v9, v18, v12                                // 00000290: 08121912


 v_cmp_gt_f32  vcc, s8, v13                                // 00000294: 7C081A08


 v_add_i32     v6, vcc, s9, v14                            // 00000298: 4A0C1C09


 s_waitcnt     vmcnt(1) & lgkmcnt(0) & expcnt(0)           // 0000029C: BF8C0001


 s_mov_b32     s3, s9                                      // 000002A0: BE830309
S3<=(19) 

 s_mov_b32     s4, s5                                      // 000002A4: BE840305
S4<=(1061910669) 

 s_mov_b32     s1, s7                                      // 000002A8: BE810307
S1<=(28) 

 s_mov_b32     s0, s7                                      // 000002AC: BE800307
S0<=(28) 

 s_mov_b32     s4, s6                                      // 000002B0: BE840306
S4<=(38) 

 s_add_i32     s0, s6, s9                                  // 000002B4: 81000906
S0<=(57) scc<=(0) 

 v_cmp_le_u32  vcc, s8, v16                                // 000002B8: 7D862008


 v_cmp_eq_i32  vcc, v19, v10                               // 000002BC: 7D041513


 v_add_f32     v2, v16, v11                                // 000002C0: 06041710


 s_cmp_eq_i32  s4, s5                                      // 000002C4: BF000504
scc<=(0) 

 v_and_b32     v6, v13, v17                                // 000002C8: 360C230D


 s_movk_i32    s4, 0x0000                                  // 000002CC: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x00050000                              // 000002D0: BE8503FF 00050000
S5<=(327680) 

 s_movk_i32    s8, 0x001a                                  // 000002D8: B008001A
S8<=(26) 

 s_buffer_load_dword  s6, s[4:7], s8                       // 000002DC: C2030408
S6<=(26)(-1593653715,-4.4308e-19f)

 v_cmp_gt_u32  vcc, v16, v14                               // 000002E0: 7D881D10


 v_lshrrev_b32  v4, s9, v17                                // 000002E4: 2C082209


 s_mov_b32     s3, s5                                      // 000002E8: BE830305
S3<=(327680) 

 v_mov_b32     v3, s5                                      // 000002EC: 7E060205


 v_add_i32     v7, vcc, s9, v16                            // 000002F0: 4A0E2009


 s_cbranch_scc1  label_00C2                                // 000002F4: BF850004


 s_mov_b32     s2, s6                                      // 000002F8: BE820306
S2<=(-1593653715) 

 s_mov_b32     s3, s7                                      // 000002FC: BE830307
S3<=(28) 

 s_mov_b32     s3, s8                                      // 00000300: BE830308
S3<=(26) 

 s_mov_b32     s4, s5                                      // 00000304: BE840305
S4<=(327680) 

 s_mov_b32     s2, s8                                      // 00000308: BE820308
S2<=(26) 

 v_mul_f32     v6, s9, v16                                 // 0000030C: 100C2009


 v_cmp_eq_i32  vcc, v19, v11                               // 00000310: 7D041713


 s_and_b32     s1, s5, s7                                  // 00000314: 87010705
S1<=(0) scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 00000318: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x001d0000                              // 0000031C: BE8703FF 001D0000
S7<=(1900544) 

 s_movk_i32    s9, 0x001c                                  // 00000324: B009001C
S9<=(28) 

 s_buffer_load_dword  s8, s[6:9], 0x09                     // 00000328: C2040709
S8<=(36)(2022540899,2.29637e+34f)

 v_cmp_eq_i32  vcc, v18, v11                               // 0000032C: 7D041712


 v_cmp_ne_i32  vcc, v16, v18                               // 00000330: 7D0A2510


 s_movk_i32    s8, 0x0000                                  // 00000334: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00020000                              // 00000338: BE8903FF 00020000
S9<=(131072) 

 s_movk_i32    s6, 0x0010                                  // 00000340: B0060010
S6<=(16) 

 s_buffer_load_dwordx2  s[9:10], s[8:11], 0x06             // 00000344: C2448906
S9<=(24)(-970095638,-11105f) S10<=(28)(488612098,2.11267e-21f) 

 v_mul_i32_i24  v6, s5, v18                                // 00000348: 120C2405


 v_and_b32     v5, s6, v11                                 // 0000034C: 360A1606


 s_mulk_i32    s4, 0x000f                                  // 00000350: B804000F
S4<=(4915200) scc<=(0) 

 v_mul_i32_i24  v8, v16, v17                               // 00000354: 12102310


 s_mov_b32     s3, s7                                      // 00000358: BE830307
S3<=(1900544) 

 s_waitcnt     vmcnt(0) & lgkmcnt(0) & expcnt(0)           // 0000035C: BF8C0000


 s_movk_i32    s8, 0x0000                                  // 00000360: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00200000                              // 00000364: BE8903FF 00200000
S9<=(2097152) 

 s_movk_i32    s7, 0x0021                                  // 0000036C: B0070021
S7<=(33) 

 s_buffer_load_dwordx2  s[6:7], s[8:11], s7                // 00000370: C2430807
S6<=(33)(1668552918,4.5028e+21f) S7<=(37)(1266191750,1.62892e+07f) 

 s_mov_b32     s2, s5                                      // 00000374: BE820305
S2<=(327680) 

 v_lshrrev_b32  v1, v17, v17                               // 00000378: 2C022311


 v_mul_i32_i24  v4, v11, v16                               // 0000037C: 1208210B


 s_and_b32     s2, s6, s7                                  // 00000380: 87020706
S2<=(1131415686) scc<=(1) 

 v_cmp_le_u32  vcc, v14, v16                               // 00000384: 7D86210E


 v_add_i32     v2, vcc, v11, v12                           // 00000388: 4A04190B


 s_branch      label_00E4                                  // 0000038C: BF820000


 s_mov_b32     s0, s6                                      // 00000390: BE800306
S0<=(1668552918) 

 s_mov_b32     s4, s7                                      // 00000394: BE840307
S4<=(1266191750) 

 s_mov_b32     s3, s6                                      // 00000398: BE830306
S3<=(1668552918) 

 s_mov_b32     s1, s9                                      // 0000039C: BE810309
S1<=(2097152) 

 s_mov_b32     s0, s7                                      // 000003A0: BE800307
S0<=(1266191750) 

 s_cmp_eq_i32  s3, s9                                      // 000003A4: BF000903
scc<=(0) 

 s_movk_i32    s8, 0x0000                                  // 000003A8: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x000e0000                              // 000003AC: BE8903FF 000E0000
S9<=(917504) 

 s_movk_i32    s8, 0x000a                                  // 000003B4: B008000A
S8<=(10) 

 s_buffer_load_dword  s7, s[8:11], 0x08                    // 000003B8: C2038908
S7<=(42)(39541406,1.61156e-37f)

 v_lshrrev_b32  v1, s6, v10                                // 000003BC: 2C021406


 s_cmp_ge_u32  s0, s9                                      // 000003C0: BF090900
scc<=(1) 

 s_not_b32     s3, s7                                      // 000003C4: BE830707
S3<=(-39541407) scc<=(1) 

 v_cmp_gt_f32  vcc, s8, v19                                // 000003C8: 7C082608


 s_movk_i32    s4, 0x0000                                  // 000003CC: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00a4                                  // 000003D0: B00500A4
S5<=(164) 

 s_movk_i32    s6, 0x0000                                  // 000003D4: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 000003D8: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x0000002e                              // 000003DC: 7E0802FF 0000002E


 s_movk_i32    s7, 0x0001                                  // 000003E4: B0070001
S7<=(1) 

 tbuffer_load_format_x  v19, v4, s[4:7], s7 offen offset:33 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 000003E8: E8201021 07011304


 s_not_b32     s3, s5                                      // 000003F0: BE830705
S3<=(-165) scc<=(1) 

 s_or_b32      s1, s5, s9                                  // 000003F4: 88010905
S1<=(917668) scc<=(1) 

 v_mov_b32     v1, v15                                     // 000003F8: 7E02030F


 v_add_i32     v1, vcc, v15, v15                           // 000003FC: 4A021F0F


 s_branch      label_0103                                  // 00000400: BF820002


 s_mov_b32     s1, s8                                      // 0000040C: BE810308
S1<=(10) 

 s_mov_b32     s1, s7                                      // 00000410: BE810307
S1<=(1) 

 s_mov_b32     s4, s9                                      // 00000414: BE840309
S4<=(917504) 

 v_add_i32     v2, vcc, v15, v15                           // 00000418: 4A041F0F


 s_branch      label_0108                                  // 0000041C: BF820000


 s_mov_b32     s0, s5                                      // 00000420: BE800305
S0<=(164) 

 s_mov_b32     s3, s7                                      // 00000424: BE830307
S3<=(1) 

 s_mov_b32     s1, s9                                      // 00000428: BE810309
S1<=(917504) 

 s_mov_b32     s1, s5                                      // 0000042C: BE810305
S1<=(164) 

 s_mov_b32     s1, s5                                      // 00000430: BE810305
S1<=(164) 

 s_or_b32      s0, s8, s6                                  // 00000434: 88000608
S0<=(10) scc<=(1) 

 s_add_i32     s0, s6, s6                                  // 00000438: 81000606
S0<=(0) scc<=(0) 

 v_add_i32     v7, vcc, s8, v10                            // 0000043C: 4A0E1408


 s_cbranch_scc0  label_0114                                // 00000440: BF840003


 s_mov_b32     s1, s6                                      // 00000450: BE810306
S1<=(0) 

 s_mov_b32     s2, s5                                      // 00000454: BE820305
S2<=(164) 

 v_add_i32     v3, vcc, s8, v10                            // 00000458: 4A061408


 s_cbranch_scc1  label_0118                                // 0000045C: BF850000


 s_mov_b32     s2, s6                                      // 00000460: BE820306
S2<=(0) 

 s_mov_b32     s3, s7                                      // 00000464: BE830307
S3<=(1) 

 s_mov_b32     s3, s8                                      // 00000468: BE830308
S3<=(10) 

 s_mov_b32     s0, s6                                      // 0000046C: BE800306
S0<=(0) 

 s_mov_b32     s2, s7                                      // 00000470: BE820307
S2<=(1) 

 v_or_b32      v8, s6, v19                                 // 00000474: 38102606


 v_cmp_gt_u32  vcc, s7, v11                                // 00000478: 7D881607


 v_lshlrev_b32  v4, s8, v10                                // 0000047C: 34081408


 s_lshl_b32    s4, s9, s8                                  // 00000480: 8F040809
S4<=(939524096) scc<=(1) 

 s_ashr_i32    s3, s7, s9                                  // 00000484: 91030907
S3<=(1) scc<=(1) 

 v_add_i32     v7, vcc, v18, v12                           // 00000488: 4A0E1912


 s_waitcnt     vmcnt(3) & lgkmcnt(0) & expcnt(0)           // 0000048C: BF8C0003


 s_mov_b32     s4, s6                                      // 00000490: BE840306
S4<=(0) 

 s_mov_b32     s2, s8                                      // 00000494: BE820308
S2<=(10) 

 s_mov_b32     s3, s6                                      // 00000498: BE830306
S3<=(0) 

 s_mov_b32     s4, s8                                      // 0000049C: BE840308
S4<=(10) 

 s_mov_b32     s1, s9                                      // 000004A0: BE810309
S1<=(917504) 

 v_mul_i32_i24  v4, s5, v14                                // 000004A4: 12081C05


 s_movk_i32    s8, 0x0000                                  // 000004A8: B0080000
S8<=(0) 

 s_movk_i32    s9, 0x0028                                  // 000004AC: B0090028
S9<=(40) 

 s_movk_i32    s10, 0x0000                                 // 000004B0: B00A0000
S10<=(0) 

 s_movk_i32    s11, 0x0000                                 // 000004B4: B00B0000
S11<=(0) 

 v_mov_b32     v9, 0x00000026                              // 000004B8: 7E1202FF 00000026


 s_movk_i32    s5, 0x0029                                  // 000004C0: B0050029
S5<=(41) 

 tbuffer_load_format_x  v13, v9, s[8:11], s5 idxen offset:34 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 000004C4: E8202022 05020D09


 s_movk_i32    s4, 0x0000                                  // 000004CC: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00ac                                  // 000004D0: B00500AC
S5<=(172) 

 s_movk_i32    s6, 0x0000                                  // 000004D4: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 000004D8: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x00000017                              // 000004DC: 7E0802FF 00000017


 s_movk_i32    s7, 0x0023                                  // 000004E4: B0070023
S7<=(35) 

 tbuffer_load_format_xyzw  v[12:15], v4, s[4:7], s7 idxen offset:44 format:[BUF_DATA_FORMAT_32_32_32_32,BUF_NUM_FORMAT_UNORM] // 000004E8: E873202C 07010C04


 s_waitcnt     vmcnt(0) & lgkmcnt(0) & expcnt(0)           // 000004F0: BF8C0000


 v_cndmask_b32  v0, s7, v10, vcc                           // 000004F4: 00001407


 s_sub_i32     s2, s7, s5                                  // 000004F8: 81820507
S2<=(-137) scc<=(0) 

 s_movk_i32    s4, 0x0000                                  // 000004FC: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00b0                                  // 00000500: B00500B0
S5<=(176) 

 s_movk_i32    s6, 0x0000                                  // 00000504: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000508: B0070000
S7<=(0) 

 v_mov_b32     v1, 0x00000002                              // 0000050C: 7E0202FF 00000002


 s_movk_i32    s9, 0x0008                                  // 00000514: B0090008
S9<=(8) 

 tbuffer_load_format_x  v18, v1, s[4:7], s9 offen offset:39 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000518: E8201027 09011201


 v_cndmask_b32  v7, s6, v15, vcc                           // 00000520: 000E1E06


 s_movk_i32    s6, 0x0000                                  // 00000524: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00130000                              // 00000528: BE8703FF 00130000
S7<=(1245184) 

 s_movk_i32    s9, 0x0013                                  // 00000530: B0090013
S9<=(19) 

 s_buffer_load_dword  s8, s[6:9], s9                       // 00000534: C2040609
S8<=(19)(-1082448351,-0.981051f)

 v_cmp_eq_i32  vcc, s6, v10                                // 00000538: 7D041406


 v_add_i32     v6, vcc, v12, v18                           // 0000053C: 4A0C250C


 v_add_i32     v6, vcc, v10, v19                           // 00000540: 4A0C270A


 s_cbranch_scc0  label_0153                                // 00000544: BF840001


 s_mov_b32     s2, s8                                      // 0000054C: BE820308
S2<=(-1082448351) 

 s_mov_b32     s1, s9                                      // 00000550: BE810309
S1<=(19) 

 s_mov_b32     s2, s6                                      // 00000554: BE820306
S2<=(0) 

 s_mov_b32     s2, s7                                      // 00000558: BE820307
S2<=(1245184) 

 v_mov_b32     v6, s8                                      // 0000055C: 7E0C0208


 s_not_b32     s1, s7                                      // 00000560: BE810707
S1<=(-1245185) scc<=(1) 

 v_cmp_ne_i32  vcc, s6, v18                                // 00000564: 7D0A2406


 v_mul_f32     v5, s8, v14                                 // 00000568: 100A1C08


 v_lshlrev_b32  v2, s9, v15                                // 0000056C: 34041E09


 s_and_saveexec_b64  s[0:1], s[6:7]                        // 00000570: BE802406
S0<=(0) S1<=(0) exec_lo<=(0) exec_hi<=(0) scc<=(0) 

 v_mov_b32     v2, v17                                     // 00000574: 7E040311


 v_cndmask_b32  v5, v12, v17, vcc                          // 00000578: 000A230C


 s_mulk_i32    s3, 0x0004                                  // 0000057C: B8030004
S3<=(0) scc<=(0) 

 s_sub_i32     s0, s5, s9                                  // 00000580: 81800905
S0<=(157) scc<=(0) 

 s_lshl_b32    s1, s6, s5                                  // 00000584: 8F010506
S1<=(0) scc<=(0) 

 s_add_u32     s1, s8, s6                                  // 00000588: 80010608
S1<=(-1082448351) scc<=(0) 

 s_not_b32     s1, s8                                      // 0000058C: BE810708
S1<=(1082448350) scc<=(1) 

 v_lshlrev_b32  v0, s7, v17                                // 00000590: 34002207


 v_cmp_gt_f32  vcc, s7, v14                                // 00000594: 7C081C07


 v_add_i32     v9, vcc, s8, v14                            // 00000598: 4A121C08


 s_cbranch_scc1  label_0169                                // 0000059C: BF850001


 s_mov_b32     s3, s9                                      // 000005A4: BE830309
S3<=(19) 

 s_mov_b32     s0, s9                                      // 000005A8: BE800309
S0<=(19) 

 s_mov_b32     s0, s9                                      // 000005AC: BE800309
S0<=(19) 

 s_mov_b32     s1, s9                                      // 000005B0: BE810309
S1<=(19) 

 s_cmp_ge_u32  s0, s7                                      // 000005B4: BF090700
scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 000005B8: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00220000                              // 000005BC: BE8703FF 00220000
S7<=(2228224) 

 s_movk_i32    s7, 0x001c                                  // 000005C4: B007001C
S7<=(28) 

 s_buffer_load_dword  s8, s[6:9], s7                       // 000005C8: C2040607
S8<=(28)(488612098,2.11267e-21f)

 v_cndmask_b32  v2, v11, v12, vcc                          // 000005CC: 0004190B


 s_lshl_b32    s0, s5, s6                                  // 000005D0: 8F000605
S0<=(176) scc<=(1) 

 s_mulk_i32    s0, 0x0002                                  // 000005D4: B8000002
S0<=(352) scc<=(0) 

 s_min_u32     s3, s7, s8                                  // 000005D8: 83830807
S3<=(28) scc<=(1) 

 s_movk_i32    s4, 0x0000                                  // 000005DC: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x002a0000                              // 000005E0: BE8503FF 002A0000
S5<=(2752512) 

 s_movk_i32    s6, 0x0026                                  // 000005E8: B0060026
S6<=(38) 

 s_buffer_load_dword  s5, s[4:7], s6                       // 000005EC: C2028406
S5<=(38)(1061910669,0.794808f)

 v_sub_f32     v9, v18, v12                                // 000005F0: 08121912


 v_cmp_gt_f32  vcc, s8, v13                                // 000005F4: 7C081A08


 v_add_i32     v6, vcc, s9, v14                            // 000005F8: 4A0C1C09


 s_waitcnt     vmcnt(1) & lgkmcnt(0) & expcnt(0)           // 000005FC: BF8C0001


 s_mov_b32     s3, s9                                      // 00000600: BE830309
S3<=(19) 

 s_mov_b32     s4, s5                                      // 00000604: BE840305
S4<=(1061910669) 

 s_mov_b32     s1, s7                                      // 00000608: BE810307
S1<=(28) 

 s_mov_b32     s0, s7                                      // 0000060C: BE800307
S0<=(28) 

 s_mov_b32     s4, s6                                      // 00000610: BE840306
S4<=(38) 

 s_add_i32     s0, s6, s9                                  // 00000614: 81000906
S0<=(57) scc<=(0) 

 v_cmp_le_u32  vcc, s8, v16                                // 00000618: 7D862008


 v_cmp_eq_i32  vcc, v19, v10                               // 0000061C: 7D041513


 v_add_f32     v2, v16, v11                                // 00000620: 06041710


 s_cmp_eq_i32  s4, s5                                      // 00000624: BF000504
scc<=(0) 

 v_and_b32     v6, v13, v17                                // 00000628: 360C230D


 s_movk_i32    s4, 0x0000                                  // 0000062C: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x00050000                              // 00000630: BE8503FF 00050000
S5<=(327680) 

 s_movk_i32    s8, 0x001a                                  // 00000638: B008001A
S8<=(26) 

 s_buffer_load_dword  s6, s[4:7], s8                       // 0000063C: C2030408
S6<=(26)(-1593653715,-4.4308e-19f)

 v_cmp_gt_u32  vcc, v16, v14                               // 00000640: 7D881D10


 v_lshrrev_b32  v4, s9, v17                                // 00000644: 2C082209


 s_mov_b32     s3, s5                                      // 00000648: BE830305
S3<=(327680) 

 v_mov_b32     v3, s5                                      // 0000064C: 7E060205


 v_add_i32     v7, vcc, s9, v16                            // 00000650: 4A0E2009


 s_cbranch_scc1  label_019A                                // 00000654: BF850004


 s_mov_b32     s2, s6                                      // 00000658: BE820306
S2<=(-1593653715) 

 s_mov_b32     s3, s7                                      // 0000065C: BE830307
S3<=(28) 

 s_mov_b32     s3, s8                                      // 00000660: BE830308
S3<=(26) 

 s_mov_b32     s4, s5                                      // 00000664: BE840305
S4<=(327680) 

 s_mov_b32     s2, s8                                      // 00000668: BE820308
S2<=(26) 

 v_mul_f32     v6, s9, v16                                 // 0000066C: 100C2009


 v_cmp_eq_i32  vcc, v19, v11                               // 00000670: 7D041713


 s_and_b32     s1, s5, s7                                  // 00000674: 87010705
S1<=(0) scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 00000678: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x001d0000                              // 0000067C: BE8703FF 001D0000
S7<=(1900544) 

 s_movk_i32    s9, 0x001c                                  // 00000684: B009001C
S9<=(28) 

 s_buffer_load_dword  s8, s[6:9], 0x09                     // 00000688: C2040709
S8<=(36)(2022540899,2.29637e+34f)

 v_cmp_eq_i32  vcc, v18, v11                               // 0000068C: 7D041712


 v_cmp_ne_i32  vcc, v16, v18                               // 00000690: 7D0A2510


 s_movk_i32    s8, 0x0000                                  // 00000694: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00020000                              // 00000698: BE8903FF 00020000
S9<=(131072) 

 s_movk_i32    s6, 0x0010                                  // 000006A0: B0060010
S6<=(16) 

 s_buffer_load_dwordx2  s[9:10], s[8:11], 0x06             // 000006A4: C2448906
S9<=(24)(-970095638,-11105f) S10<=(28)(488612098,2.11267e-21f) 

 v_mul_i32_i24  v6, s5, v18                                // 000006A8: 120C2405


 v_and_b32     v5, s6, v11                                 // 000006AC: 360A1606


 s_mulk_i32    s4, 0x000f                                  // 000006B0: B804000F
S4<=(4915200) scc<=(0) 

 v_mul_i32_i24  v8, v16, v17                               // 000006B4: 12102310


 s_mov_b32     s3, s7                                      // 000006B8: BE830307
S3<=(1900544) 

 s_waitcnt     vmcnt(0) & lgkmcnt(0) & expcnt(0)           // 000006BC: BF8C0000


 s_movk_i32    s8, 0x0000                                  // 000006C0: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00200000                              // 000006C4: BE8903FF 00200000
S9<=(2097152) 

 s_movk_i32    s7, 0x0021                                  // 000006CC: B0070021
S7<=(33) 

 s_buffer_load_dwordx2  s[6:7], s[8:11], s7                // 000006D0: C2430807
S6<=(33)(1668552918,4.5028e+21f) S7<=(37)(1266191750,1.62892e+07f) 

 s_mov_b32     s2, s5                                      // 000006D4: BE820305
S2<=(327680) 

 v_lshrrev_b32  v1, v17, v17                               // 000006D8: 2C022311


 v_mul_i32_i24  v4, v11, v16                               // 000006DC: 1208210B


 s_and_b32     s2, s6, s7                                  // 000006E0: 87020706
S2<=(1131415686) scc<=(1) 

 v_cmp_le_u32  vcc, v14, v16                               // 000006E4: 7D86210E


 v_add_i32     v2, vcc, v11, v12                           // 000006E8: 4A04190B


 s_branch      label_01BC                                  // 000006EC: BF820000


 s_mov_b32     s0, s6                                      // 000006F0: BE800306
S0<=(1668552918) 

 s_mov_b32     s4, s7                                      // 000006F4: BE840307
S4<=(1266191750) 

 s_mov_b32     s3, s6                                      // 000006F8: BE830306
S3<=(1668552918) 

 s_mov_b32     s1, s9                                      // 000006FC: BE810309
S1<=(2097152) 

 s_mov_b32     s0, s7                                      // 00000700: BE800307
S0<=(1266191750) 

 s_cmp_eq_i32  s3, s9                                      // 00000704: BF000903
scc<=(0) 

 s_movk_i32    s8, 0x0000                                  // 00000708: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x000e0000                              // 0000070C: BE8903FF 000E0000
S9<=(917504) 

 s_movk_i32    s8, 0x000a                                  // 00000714: B008000A
S8<=(10) 

 s_buffer_load_dword  s7, s[8:11], 0x08                    // 00000718: C2038908
S7<=(42)(39541406,1.61156e-37f)

 v_lshrrev_b32  v1, s6, v10                                // 0000071C: 2C021406


 s_cmp_ge_u32  s0, s9                                      // 00000720: BF090900
scc<=(1) 

 s_not_b32     s3, s7                                      // 00000724: BE830707
S3<=(-39541407) scc<=(1) 

 v_cmp_gt_f32  vcc, s8, v19                                // 00000728: 7C082608


 s_movk_i32    s4, 0x0000                                  // 0000072C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00a4                                  // 00000730: B00500A4
S5<=(164) 

 s_movk_i32    s6, 0x0000                                  // 00000734: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000738: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x0000002e                              // 0000073C: 7E0802FF 0000002E


 s_movk_i32    s7, 0x0001                                  // 00000744: B0070001
S7<=(1) 

 tbuffer_load_format_x  v19, v4, s[4:7], s7 offen offset:33 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000748: E8201021 07011304


 s_not_b32     s3, s5                                      // 00000750: BE830705
S3<=(-165) scc<=(1) 

 s_or_b32      s1, s5, s9                                  // 00000754: 88010905
S1<=(917668) scc<=(1) 

 v_mov_b32     v1, v15                                     // 00000758: 7E02030F


 v_add_i32     v1, vcc, v15, v15                           // 0000075C: 4A021F0F


 s_branch      label_01DB                                  // 00000760: BF820002


 s_mov_b32     s1, s8                                      // 0000076C: BE810308
S1<=(10) 

 s_mov_b32     s1, s7                                      // 00000770: BE810307
S1<=(1) 

 s_mov_b32     s4, s9                                      // 00000774: BE840309
S4<=(917504) 

 v_add_i32     v2, vcc, v15, v15                           // 00000778: 4A041F0F


 s_branch      label_01E0                                  // 0000077C: BF820000


 s_mov_b32     s0, s5                                      // 00000780: BE800305
S0<=(164) 

 s_mov_b32     s3, s7                                      // 00000784: BE830307
S3<=(1) 

 s_mov_b32     s1, s9                                      // 00000788: BE810309
S1<=(917504) 

 s_mov_b32     s1, s5                                      // 0000078C: BE810305
S1<=(164) 

 s_mov_b32     s1, s5                                      // 00000790: BE810305
S1<=(164) 

 s_or_b32      s0, s8, s6                                  // 00000794: 88000608
S0<=(10) scc<=(1) 

 s_add_i32     s0, s6, s6                                  // 00000798: 81000606
S0<=(0) scc<=(0) 

 v_add_i32     v7, vcc, s8, v10                            // 0000079C: 4A0E1408


 s_cbranch_scc0  label_01EC                                // 000007A0: BF840003


 s_mov_b32     s1, s6                                      // 000007B0: BE810306
S1<=(0) 

 s_mov_b32     s2, s5                                      // 000007B4: BE820305
S2<=(164) 

 v_add_i32     v3, vcc, s8, v10                            // 000007B8: 4A061408


 s_cbranch_scc1  label_01F0                                // 000007BC: BF850000


 s_mov_b32     s2, s6                                      // 000007C0: BE820306
S2<=(0) 

 s_mov_b32     s3, s7                                      // 000007C4: BE830307
S3<=(1) 

 s_mov_b32     s3, s8                                      // 000007C8: BE830308
S3<=(10) 

 s_mov_b32     s0, s6                                      // 000007CC: BE800306
S0<=(0) 

 s_mov_b32     s2, s7                                      // 000007D0: BE820307
S2<=(1) 

 v_or_b32      v8, s6, v19                                 // 000007D4: 38102606


 v_cmp_gt_u32  vcc, s7, v11                                // 000007D8: 7D881607


 v_lshlrev_b32  v4, s8, v10                                // 000007DC: 34081408


 s_lshl_b32    s4, s9, s8                                  // 000007E0: 8F040809
S4<=(939524096) scc<=(1) 

 s_ashr_i32    s3, s7, s9                                  // 000007E4: 91030907
S3<=(1) scc<=(1) 

 v_add_i32     v7, vcc, v18, v12                           // 000007E8: 4A0E1912


 s_waitcnt     vmcnt(3) & lgkmcnt(0) & expcnt(0)           // 000007EC: BF8C0003


 s_mov_b32     s4, s6                                      // 000007F0: BE840306
S4<=(0) 

 s_mov_b32     s2, s8                                      // 000007F4: BE820308
S2<=(10) 

 s_mov_b32     s3, s6                                      // 000007F8: BE830306
S3<=(0) 

 s_mov_b32     s4, s8                                      // 000007FC: BE840308
S4<=(10) 

 s_mov_b32     s1, s9                                      // 00000800: BE810309
S1<=(917504) 

 v_mul_i32_i24  v4, s5, v14                                // 00000804: 12081C05


 s_movk_i32    s8, 0x0000                                  // 00000808: B0080000
S8<=(0) 

 s_movk_i32    s9, 0x0028                                  // 0000080C: B0090028
S9<=(40) 

 s_movk_i32    s10, 0x0000                                 // 00000810: B00A0000
S10<=(0) 

 s_movk_i32    s11, 0x0000                                 // 00000814: B00B0000
S11<=(0) 

 v_mov_b32     v9, 0x00000026                              // 00000818: 7E1202FF 00000026


 s_movk_i32    s5, 0x0029                                  // 00000820: B0050029
S5<=(41) 

 tbuffer_load_format_x  v13, v9, s[8:11], s5 idxen offset:34 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000824: E8202022 05020D09


 s_movk_i32    s4, 0x0000                                  // 0000082C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00ac                                  // 00000830: B00500AC
S5<=(172) 

 s_movk_i32    s6, 0x0000                                  // 00000834: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000838: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x00000017                              // 0000083C: 7E0802FF 00000017


 s_movk_i32    s7, 0x0023                                  // 00000844: B0070023
S7<=(35) 

 tbuffer_load_format_xyzw  v[12:15], v4, s[4:7], s7 idxen offset:44 format:[BUF_DATA_FORMAT_32_32_32_32,BUF_NUM_FORMAT_UNORM] // 00000848: E873202C 07010C04


 s_waitcnt     vmcnt(0) & lgkmcnt(0) & expcnt(0)           // 00000850: BF8C0000


 v_cndmask_b32  v0, s7, v10, vcc                           // 00000854: 00001407


 s_sub_i32     s2, s7, s5                                  // 00000858: 81820507
S2<=(-137) scc<=(0) 

 s_movk_i32    s4, 0x0000                                  // 0000085C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00b0                                  // 00000860: B00500B0
S5<=(176) 

 s_movk_i32    s6, 0x0000                                  // 00000864: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000868: B0070000
S7<=(0) 

 v_mov_b32     v1, 0x00000002                              // 0000086C: 7E0202FF 00000002


 s_movk_i32    s9, 0x0008                                  // 00000874: B0090008
S9<=(8) 

 tbuffer_load_format_x  v18, v1, s[4:7], s9 offen offset:39 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000878: E8201027 09011201


 v_cndmask_b32  v7, s6, v15, vcc                           // 00000880: 000E1E06


 s_movk_i32    s6, 0x0000                                  // 00000884: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00130000                              // 00000888: BE8703FF 00130000
S7<=(1245184) 

 s_movk_i32    s9, 0x0013                                  // 00000890: B0090013
S9<=(19) 

 s_buffer_load_dword  s8, s[6:9], s9                       // 00000894: C2040609
S8<=(19)(-1082448351,-0.981051f)

 v_cmp_eq_i32  vcc, s6, v10                                // 00000898: 7D041406


 v_add_i32     v6, vcc, v12, v18                           // 0000089C: 4A0C250C


 v_add_i32     v6, vcc, v10, v19                           // 000008A0: 4A0C270A


 s_cbranch_scc0  label_022B                                // 000008A4: BF840001


 s_mov_b32     s2, s8                                      // 000008AC: BE820308
S2<=(-1082448351) 

 s_mov_b32     s1, s9                                      // 000008B0: BE810309
S1<=(19) 

 s_mov_b32     s2, s6                                      // 000008B4: BE820306
S2<=(0) 

 s_mov_b32     s2, s7                                      // 000008B8: BE820307
S2<=(1245184) 

 v_mov_b32     v6, s8                                      // 000008BC: 7E0C0208


 s_not_b32     s1, s7                                      // 000008C0: BE810707
S1<=(-1245185) scc<=(1) 

 v_cmp_ne_i32  vcc, s6, v18                                // 000008C4: 7D0A2406


 v_mul_f32     v5, s8, v14                                 // 000008C8: 100A1C08


 v_lshlrev_b32  v2, s9, v15                                // 000008CC: 34041E09


 s_and_saveexec_b64  s[0:1], s[6:7]                        // 000008D0: BE802406
S0<=(0) S1<=(0) exec_lo<=(0) exec_hi<=(0) scc<=(0) 

 v_mov_b32     v2, v17                                     // 000008D4: 7E040311


 v_cndmask_b32  v5, v12, v17, vcc                          // 000008D8: 000A230C


 s_mulk_i32    s3, 0x0004                                  // 000008DC: B8030004
S3<=(0) scc<=(0) 

 s_sub_i32     s0, s5, s9                                  // 000008E0: 81800905
S0<=(157) scc<=(0) 

 s_lshl_b32    s1, s6, s5                                  // 000008E4: 8F010506
S1<=(0) scc<=(0) 

 s_add_u32     s1, s8, s6                                  // 000008E8: 80010608
S1<=(-1082448351) scc<=(0) 

 s_not_b32     s1, s8                                      // 000008EC: BE810708
S1<=(1082448350) scc<=(1) 

 v_lshlrev_b32  v0, s7, v17                                // 000008F0: 34002207


 v_cmp_gt_f32  vcc, s7, v14                                // 000008F4: 7C081C07


 v_add_i32     v9, vcc, s8, v14                            // 000008F8: 4A121C08


 s_cbranch_scc1  label_0241                                // 000008FC: BF850001


 s_mov_b32     s3, s9                                      // 00000904: BE830309
S3<=(19) 

 s_mov_b32     s0, s9                                      // 00000908: BE800309
S0<=(19) 

 s_mov_b32     s0, s9                                      // 0000090C: BE800309
S0<=(19) 

 s_mov_b32     s1, s9                                      // 00000910: BE810309
S1<=(19) 

 s_cmp_ge_u32  s0, s7                                      // 00000914: BF090700
scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 00000918: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00220000                              // 0000091C: BE8703FF 00220000
S7<=(2228224) 

 s_movk_i32    s7, 0x001c                                  // 00000924: B007001C
S7<=(28) 

 s_buffer_load_dword  s8, s[6:9], s7                       // 00000928: C2040607
S8<=(28)(488612098,2.11267e-21f)

 v_cndmask_b32  v2, v11, v12, vcc                          // 0000092C: 0004190B


 s_lshl_b32    s0, s5, s6                                  // 00000930: 8F000605
S0<=(176) scc<=(1) 

 s_mulk_i32    s0, 0x0002                                  // 00000934: B8000002
S0<=(352) scc<=(0) 

 s_min_u32     s3, s7, s8                                  // 00000938: 83830807
S3<=(28) scc<=(1) 

 s_movk_i32    s4, 0x0000                                  // 0000093C: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x002a0000                              // 00000940: BE8503FF 002A0000
S5<=(2752512) 

 s_movk_i32    s6, 0x0026                                  // 00000948: B0060026
S6<=(38) 

 s_buffer_load_dword  s5, s[4:7], s6                       // 0000094C: C2028406
S5<=(38)(1061910669,0.794808f)

 v_sub_f32     v9, v18, v12                                // 00000950: 08121912


 v_cmp_gt_f32  vcc, s8, v13                                // 00000954: 7C081A08


 v_add_i32     v6, vcc, s9, v14                            // 00000958: 4A0C1C09


 s_waitcnt     vmcnt(1) & lgkmcnt(0) & expcnt(0)           // 0000095C: BF8C0001


 s_mov_b32     s3, s9                                      // 00000960: BE830309
S3<=(19) 

 s_mov_b32     s4, s5                                      // 00000964: BE840305
S4<=(1061910669) 

 s_mov_b32     s1, s7                                      // 00000968: BE810307
S1<=(28) 

 s_mov_b32     s0, s7                                      // 0000096C: BE800307
S0<=(28) 

 s_mov_b32     s4, s6                                      // 00000970: BE840306
S4<=(38) 

 s_add_i32     s0, s6, s9                                  // 00000974: 81000906
S0<=(57) scc<=(0) 

 v_cmp_le_u32  vcc, s8, v16                                // 00000978: 7D862008


 v_cmp_eq_i32  vcc, v19, v10                               // 0000097C: 7D041513


 v_add_f32     v2, v16, v11                                // 00000980: 06041710


 s_cmp_eq_i32  s4, s5                                      // 00000984: BF000504
scc<=(0) 

 v_and_b32     v6, v13, v17                                // 00000988: 360C230D


 s_movk_i32    s4, 0x0000                                  // 0000098C: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x00050000                              // 00000990: BE8503FF 00050000
S5<=(327680) 

 s_movk_i32    s8, 0x001a                                  // 00000998: B008001A
S8<=(26) 

 s_buffer_load_dword  s6, s[4:7], s8                       // 0000099C: C2030408
S6<=(26)(-1593653715,-4.4308e-19f)

 v_cmp_gt_u32  vcc, v16, v14                               // 000009A0: 7D881D10


 v_lshrrev_b32  v4, s9, v17                                // 000009A4: 2C082209


 s_mov_b32     s3, s5                                      // 000009A8: BE830305
S3<=(327680) 

 v_mov_b32     v3, s5                                      // 000009AC: 7E060205


 v_add_i32     v7, vcc, s9, v16                            // 000009B0: 4A0E2009


 s_cbranch_scc1  label_0272                                // 000009B4: BF850004


 s_mov_b32     s2, s6                                      // 000009B8: BE820306
S2<=(-1593653715) 

 s_mov_b32     s3, s7                                      // 000009BC: BE830307
S3<=(28) 

 s_mov_b32     s3, s8                                      // 000009C0: BE830308
S3<=(26) 

 s_mov_b32     s4, s5                                      // 000009C4: BE840305
S4<=(327680) 

 s_mov_b32     s2, s8                                      // 000009C8: BE820308
S2<=(26) 

 v_mul_f32     v6, s9, v16                                 // 000009CC: 100C2009


 v_cmp_eq_i32  vcc, v19, v11                               // 000009D0: 7D041713


 s_and_b32     s1, s5, s7                                  // 000009D4: 87010705
S1<=(0) scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 000009D8: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x001d0000                              // 000009DC: BE8703FF 001D0000
S7<=(1900544) 

 s_movk_i32    s9, 0x001c                                  // 000009E4: B009001C
S9<=(28) 

 s_buffer_load_dword  s8, s[6:9], 0x09                     // 000009E8: C2040709
S8<=(36)(2022540899,2.29637e+34f)

 v_cmp_eq_i32  vcc, v18, v11                               // 000009EC: 7D041712


 v_cmp_ne_i32  vcc, v16, v18                               // 000009F0: 7D0A2510


 s_movk_i32    s8, 0x0000                                  // 000009F4: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00020000                              // 000009F8: BE8903FF 00020000
S9<=(131072) 

 s_movk_i32    s6, 0x0010                                  // 00000A00: B0060010
S6<=(16) 

 s_buffer_load_dwordx2  s[9:10], s[8:11], 0x06             // 00000A04: C2448906
S9<=(24)(-970095638,-11105f) S10<=(28)(488612098,2.11267e-21f) 

 v_mul_i32_i24  v6, s5, v18                                // 00000A08: 120C2405


 v_and_b32     v5, s6, v11                                 // 00000A0C: 360A1606


 s_mulk_i32    s4, 0x000f                                  // 00000A10: B804000F
S4<=(4915200) scc<=(0) 

 v_mul_i32_i24  v8, v16, v17                               // 00000A14: 12102310


 s_mov_b32     s3, s7                                      // 00000A18: BE830307
S3<=(1900544) 

 s_waitcnt     vmcnt(0) & lgkmcnt(0) & expcnt(0)           // 00000A1C: BF8C0000


 s_movk_i32    s8, 0x0000                                  // 00000A20: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00200000                              // 00000A24: BE8903FF 00200000
S9<=(2097152) 

 s_movk_i32    s7, 0x0021                                  // 00000A2C: B0070021
S7<=(33) 

 s_buffer_load_dwordx2  s[6:7], s[8:11], s7                // 00000A30: C2430807
S6<=(33)(1668552918,4.5028e+21f) S7<=(37)(1266191750,1.62892e+07f) 

 s_mov_b32     s2, s5                                      // 00000A34: BE820305
S2<=(327680) 

 v_lshrrev_b32  v1, v17, v17                               // 00000A38: 2C022311


 v_mul_i32_i24  v4, v11, v16                               // 00000A3C: 1208210B


 s_and_b32     s2, s6, s7                                  // 00000A40: 87020706
S2<=(1131415686) scc<=(1) 

 v_cmp_le_u32  vcc, v14, v16                               // 00000A44: 7D86210E


 v_add_i32     v2, vcc, v11, v12                           // 00000A48: 4A04190B


 s_branch      label_0294                                  // 00000A4C: BF820000


 s_mov_b32     s0, s6                                      // 00000A50: BE800306
S0<=(1668552918) 

 s_mov_b32     s4, s7                                      // 00000A54: BE840307
S4<=(1266191750) 

 s_mov_b32     s3, s6                                      // 00000A58: BE830306
S3<=(1668552918) 

 s_mov_b32     s1, s9                                      // 00000A5C: BE810309
S1<=(2097152) 

 s_mov_b32     s0, s7                                      // 00000A60: BE800307
S0<=(1266191750) 

 s_cmp_eq_i32  s3, s9                                      // 00000A64: BF000903
scc<=(0) 

 s_movk_i32    s8, 0x0000                                  // 00000A68: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x000e0000                              // 00000A6C: BE8903FF 000E0000
S9<=(917504) 

 s_movk_i32    s8, 0x000a                                  // 00000A74: B008000A
S8<=(10) 

 s_buffer_load_dword  s7, s[8:11], 0x08                    // 00000A78: C2038908
S7<=(42)(39541406,1.61156e-37f)

 v_lshrrev_b32  v1, s6, v10                                // 00000A7C: 2C021406


 s_cmp_ge_u32  s0, s9                                      // 00000A80: BF090900
scc<=(1) 

 s_not_b32     s3, s7                                      // 00000A84: BE830707
S3<=(-39541407) scc<=(1) 

 v_cmp_gt_f32  vcc, s8, v19                                // 00000A88: 7C082608


 s_movk_i32    s4, 0x0000                                  // 00000A8C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00a4                                  // 00000A90: B00500A4
S5<=(164) 

 s_movk_i32    s6, 0x0000                                  // 00000A94: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000A98: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x0000002e                              // 00000A9C: 7E0802FF 0000002E


 s_movk_i32    s7, 0x0001                                  // 00000AA4: B0070001
S7<=(1) 

 tbuffer_load_format_x  v19, v4, s[4:7], s7 offen offset:33 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000AA8: E8201021 07011304


 s_not_b32     s3, s5                                      // 00000AB0: BE830705
S3<=(-165) scc<=(1) 

 s_or_b32      s1, s5, s9                                  // 00000AB4: 88010905
S1<=(917668) scc<=(1) 

 v_mov_b32     v1, v15                                     // 00000AB8: 7E02030F


 v_add_i32     v1, vcc, v15, v15                           // 00000ABC: 4A021F0F


 s_branch      label_02B3                                  // 00000AC0: BF820002


 s_mov_b32     s1, s8                                      // 00000ACC: BE810308
S1<=(10) 

 s_mov_b32     s1, s7                                      // 00000AD0: BE810307
S1<=(1) 

 s_mov_b32     s4, s9                                      // 00000AD4: BE840309
S4<=(917504) 

 v_add_i32     v2, vcc, v15, v15                           // 00000AD8: 4A041F0F


 s_branch      label_02B8                                  // 00000ADC: BF820000


 s_mov_b32     s0, s5                                      // 00000AE0: BE800305
S0<=(164) 

 s_mov_b32     s3, s7                                      // 00000AE4: BE830307
S3<=(1) 

 s_mov_b32     s1, s9                                      // 00000AE8: BE810309
S1<=(917504) 

 s_mov_b32     s1, s5                                      // 00000AEC: BE810305
S1<=(164) 

 s_mov_b32     s1, s5                                      // 00000AF0: BE810305
S1<=(164) 

 s_or_b32      s0, s8, s6                                  // 00000AF4: 88000608
S0<=(10) scc<=(1) 

 s_add_i32     s0, s6, s6                                  // 00000AF8: 81000606
S0<=(0) scc<=(0) 

 v_add_i32     v7, vcc, s8, v10                            // 00000AFC: 4A0E1408


 s_cbranch_scc0  label_02C4                                // 00000B00: BF840003


 s_mov_b32     s1, s6                                      // 00000B10: BE810306
S1<=(0) 

 s_mov_b32     s2, s5                                      // 00000B14: BE820305
S2<=(164) 

 v_add_i32     v3, vcc, s8, v10                            // 00000B18: 4A061408


 s_cbranch_scc1  label_02C8                                // 00000B1C: BF850000


 s_mov_b32     s2, s6                                      // 00000B20: BE820306
S2<=(0) 

 s_mov_b32     s3, s7                                      // 00000B24: BE830307
S3<=(1) 

 s_mov_b32     s3, s8                                      // 00000B28: BE830308
S3<=(10) 

 s_mov_b32     s0, s6                                      // 00000B2C: BE800306
S0<=(0) 

 s_mov_b32     s2, s7                                      // 00000B30: BE820307
S2<=(1) 

 v_or_b32      v8, s6, v19                                 // 00000B34: 38102606


 v_cmp_gt_u32  vcc, s7, v11                                // 00000B38: 7D881607


 v_lshlrev_b32  v4, s8, v10                                // 00000B3C: 34081408


 s_lshl_b32    s4, s9, s8                                  // 00000B40: 8F040809
S4<=(939524096) scc<=(1) 

 s_ashr_i32    s3, s7, s9                                  // 00000B44: 91030907
S3<=(1) scc<=(1) 

 v_add_i32     v7, vcc, v18, v12                           // 00000B48: 4A0E1912


 s_waitcnt     vmcnt(3) & lgkmcnt(0) & expcnt(0)           // 00000B4C: BF8C0003


 s_mov_b32     s4, s6                                      // 00000B50: BE840306
S4<=(0) 

 s_mov_b32     s2, s8                                      // 00000B54: BE820308
S2<=(10) 

 s_mov_b32     s3, s6                                      // 00000B58: BE830306
S3<=(0) 

 s_mov_b32     s4, s8                                      // 00000B5C: BE840308
S4<=(10) 

 s_mov_b32     s1, s9                                      // 00000B60: BE810309
S1<=(917504) 

 v_mul_i32_i24  v4, s5, v14                                // 00000B64: 12081C05


 s_movk_i32    s8, 0x0000                                  // 00000B68: B0080000
S8<=(0) 

 s_movk_i32    s9, 0x0028                                  // 00000B6C: B0090028
S9<=(40) 

 s_movk_i32    s10, 0x0000                                 // 00000B70: B00A0000
S10<=(0) 

 s_movk_i32    s11, 0x0000                                 // 00000B74: B00B0000
S11<=(0) 

 v_mov_b32     v9, 0x00000026                              // 00000B78: 7E1202FF 00000026


 s_movk_i32    s5, 0x0029                                  // 00000B80: B0050029
S5<=(41) 

 tbuffer_load_format_x  v13, v9, s[8:11], s5 idxen offset:34 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000B84: E8202022 05020D09


 s_movk_i32    s4, 0x0000                                  // 00000B8C: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00ac                                  // 00000B90: B00500AC
S5<=(172) 

 s_movk_i32    s6, 0x0000                                  // 00000B94: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000B98: B0070000
S7<=(0) 

 v_mov_b32     v4, 0x00000017                              // 00000B9C: 7E0802FF 00000017


 s_movk_i32    s7, 0x0023                                  // 00000BA4: B0070023
S7<=(35) 

 tbuffer_load_format_xyzw  v[12:15], v4, s[4:7], s7 idxen offset:44 format:[BUF_DATA_FORMAT_32_32_32_32,BUF_NUM_FORMAT_UNORM] // 00000BA8: E873202C 07010C04


 s_waitcnt     vmcnt(0) & lgkmcnt(0) & expcnt(0)           // 00000BB0: BF8C0000


 v_cndmask_b32  v0, s7, v10, vcc                           // 00000BB4: 00001407


 s_sub_i32     s2, s7, s5                                  // 00000BB8: 81820507
S2<=(-137) scc<=(0) 

 s_movk_i32    s4, 0x0000                                  // 00000BBC: B0040000
S4<=(0) 

 s_movk_i32    s5, 0x00b0                                  // 00000BC0: B00500B0
S5<=(176) 

 s_movk_i32    s6, 0x0000                                  // 00000BC4: B0060000
S6<=(0) 

 s_movk_i32    s7, 0x0000                                  // 00000BC8: B0070000
S7<=(0) 

 v_mov_b32     v1, 0x00000002                              // 00000BCC: 7E0202FF 00000002


 s_movk_i32    s9, 0x0008                                  // 00000BD4: B0090008
S9<=(8) 

 tbuffer_load_format_x  v18, v1, s[4:7], s9 offen offset:39 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_UNORM] // 00000BD8: E8201027 09011201


 v_cndmask_b32  v7, s6, v15, vcc                           // 00000BE0: 000E1E06


 s_movk_i32    s6, 0x0000                                  // 00000BE4: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00130000                              // 00000BE8: BE8703FF 00130000
S7<=(1245184) 

 s_movk_i32    s9, 0x0013                                  // 00000BF0: B0090013
S9<=(19) 

 s_buffer_load_dword  s8, s[6:9], s9                       // 00000BF4: C2040609
S8<=(19)(-1082448351,-0.981051f)

 v_cmp_eq_i32  vcc, s6, v10                                // 00000BF8: 7D041406


 v_add_i32     v6, vcc, v12, v18                           // 00000BFC: 4A0C250C


 v_add_i32     v6, vcc, v10, v19                           // 00000C00: 4A0C270A


 s_cbranch_scc0  label_0303                                // 00000C04: BF840001


 s_mov_b32     s2, s8                                      // 00000C0C: BE820308
S2<=(-1082448351) 

 s_mov_b32     s1, s9                                      // 00000C10: BE810309
S1<=(19) 

 s_mov_b32     s2, s6                                      // 00000C14: BE820306
S2<=(0) 

 s_mov_b32     s2, s7                                      // 00000C18: BE820307
S2<=(1245184) 

 v_mov_b32     v6, s8                                      // 00000C1C: 7E0C0208


 s_not_b32     s1, s7                                      // 00000C20: BE810707
S1<=(-1245185) scc<=(1) 

 v_cmp_ne_i32  vcc, s6, v18                                // 00000C24: 7D0A2406


 v_mul_f32     v5, s8, v14                                 // 00000C28: 100A1C08


 v_lshlrev_b32  v2, s9, v15                                // 00000C2C: 34041E09


 s_and_saveexec_b64  s[0:1], s[6:7]                        // 00000C30: BE802406
S0<=(0) S1<=(0) exec_lo<=(0) exec_hi<=(0) scc<=(0) 

 v_mov_b32     v2, v17                                     // 00000C34: 7E040311


 v_cndmask_b32  v5, v12, v17, vcc                          // 00000C38: 000A230C


 s_mulk_i32    s3, 0x0004                                  // 00000C3C: B8030004
S3<=(0) scc<=(0) 

 s_sub_i32     s0, s5, s9                                  // 00000C40: 81800905
S0<=(157) scc<=(0) 

 s_lshl_b32    s1, s6, s5                                  // 00000C44: 8F010506
S1<=(0) scc<=(0) 

 s_add_u32     s1, s8, s6                                  // 00000C48: 80010608
S1<=(-1082448351) scc<=(0) 

 s_not_b32     s1, s8                                      // 00000C4C: BE810708
S1<=(1082448350) scc<=(1) 

 v_lshlrev_b32  v0, s7, v17                                // 00000C50: 34002207


 v_cmp_gt_f32  vcc, s7, v14                                // 00000C54: 7C081C07


 v_add_i32     v9, vcc, s8, v14                            // 00000C58: 4A121C08


 s_cbranch_scc1  label_0319                                // 00000C5C: BF850001


 s_mov_b32     s3, s9                                      // 00000C64: BE830309
S3<=(19) 

 s_mov_b32     s0, s9                                      // 00000C68: BE800309
S0<=(19) 

 s_mov_b32     s0, s9                                      // 00000C6C: BE800309
S0<=(19) 

 s_mov_b32     s1, s9                                      // 00000C70: BE810309
S1<=(19) 

 s_cmp_ge_u32  s0, s7                                      // 00000C74: BF090700
scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 00000C78: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x00220000                              // 00000C7C: BE8703FF 00220000
S7<=(2228224) 

 s_movk_i32    s7, 0x001c                                  // 00000C84: B007001C
S7<=(28) 

 s_buffer_load_dword  s8, s[6:9], s7                       // 00000C88: C2040607
S8<=(28)(488612098,2.11267e-21f)

 v_cndmask_b32  v2, v11, v12, vcc                          // 00000C8C: 0004190B


 s_lshl_b32    s0, s5, s6                                  // 00000C90: 8F000605
S0<=(176) scc<=(1) 

 s_mulk_i32    s0, 0x0002                                  // 00000C94: B8000002
S0<=(352) scc<=(0) 

 s_min_u32     s3, s7, s8                                  // 00000C98: 83830807
S3<=(28) scc<=(1) 

 s_movk_i32    s4, 0x0000                                  // 00000C9C: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x002a0000                              // 00000CA0: BE8503FF 002A0000
S5<=(2752512) 

 s_movk_i32    s6, 0x0026                                  // 00000CA8: B0060026
S6<=(38) 

 s_buffer_load_dword  s5, s[4:7], s6                       // 00000CAC: C2028406
S5<=(38)(1061910669,0.794808f)

 v_sub_f32     v9, v18, v12                                // 00000CB0: 08121912


 v_cmp_gt_f32  vcc, s8, v13                                // 00000CB4: 7C081A08


 v_add_i32     v6, vcc, s9, v14                            // 00000CB8: 4A0C1C09


 s_waitcnt     vmcnt(1) & lgkmcnt(0) & expcnt(0)           // 00000CBC: BF8C0001


 s_mov_b32     s3, s9                                      // 00000CC0: BE830309
S3<=(19) 

 s_mov_b32     s4, s5                                      // 00000CC4: BE840305
S4<=(1061910669) 

 s_mov_b32     s1, s7                                      // 00000CC8: BE810307
S1<=(28) 

 s_mov_b32     s0, s7                                      // 00000CCC: BE800307
S0<=(28) 

 s_mov_b32     s4, s6                                      // 00000CD0: BE840306
S4<=(38) 

 s_add_i32     s0, s6, s9                                  // 00000CD4: 81000906
S0<=(57) scc<=(0) 

 v_cmp_le_u32  vcc, s8, v16                                // 00000CD8: 7D862008


 v_cmp_eq_i32  vcc, v19, v10                               // 00000CDC: 7D041513


 v_add_f32     v2, v16, v11                                // 00000CE0: 06041710


 s_cmp_eq_i32  s4, s5                                      // 00000CE4: BF000504
scc<=(0) 

 v_and_b32     v6, v13, v17                                // 00000CE8: 360C230D


 s_movk_i32    s4, 0x0000                                  // 00000CEC: B0040000
S4<=(0) 

 s_mov_b32     s5, 0x00050000                              // 00000CF0: BE8503FF 00050000
S5<=(327680) 

 s_movk_i32    s8, 0x001a                                  // 00000CF8: B008001A
S8<=(26) 

 s_buffer_load_dword  s6, s[4:7], s8                       // 00000CFC: C2030408
S6<=(26)(-1593653715,-4.4308e-19f)

 v_cmp_gt_u32  vcc, v16, v14                               // 00000D00: 7D881D10


 v_lshrrev_b32  v4, s9, v17                                // 00000D04: 2C082209


 s_mov_b32     s3, s5                                      // 00000D08: BE830305
S3<=(327680) 

 v_mov_b32     v3, s5                                      // 00000D0C: 7E060205


 v_add_i32     v7, vcc, s9, v16                            // 00000D10: 4A0E2009


 s_cbranch_scc1  label_034A                                // 00000D14: BF850004


 s_mov_b32     s2, s6                                      // 00000D18: BE820306
S2<=(-1593653715) 

 s_mov_b32     s3, s7                                      // 00000D1C: BE830307
S3<=(28) 

 s_mov_b32     s3, s8                                      // 00000D20: BE830308
S3<=(26) 

 s_mov_b32     s4, s5                                      // 00000D24: BE840305
S4<=(327680) 

 s_mov_b32     s2, s8                                      // 00000D28: BE820308
S2<=(26) 

 v_mul_f32     v6, s9, v16                                 // 00000D2C: 100C2009


 v_cmp_eq_i32  vcc, v19, v11                               // 00000D30: 7D041713


 s_and_b32     s1, s5, s7                                  // 00000D34: 87010705
S1<=(0) scc<=(0) 

 s_movk_i32    s6, 0x0000                                  // 00000D38: B0060000
S6<=(0) 

 s_mov_b32     s7, 0x001d0000                              // 00000D3C: BE8703FF 001D0000
S7<=(1900544) 

 s_movk_i32    s9, 0x001c                                  // 00000D44: B009001C
S9<=(28) 

 s_buffer_load_dword  s8, s[6:9], 0x09                     // 00000D48: C2040709
S8<=(36)(2022540899,2.29637e+34f)

 v_cmp_eq_i32  vcc, v18, v11                               // 00000D4C: 7D041712


 v_cmp_ne_i32  vcc, v16, v18                               // 00000D50: 7D0A2510


 s_movk_i32    s8, 0x0000                                  // 00000D54: B0080000
S8<=(0) 

 s_mov_b32     s9, 0x00020000                              // 00000D58: BE8903FF 00020000
S9<=(131072) 

 s_movk_i32    s6, 0x0010                                  // 00000D60: B0060010
S6<=(16) 

 s_buffer_load_dwordx2  s[9:10], s[8:11], 0x06             // 00000D64: C2448906
S9<=(24)(-970095638,-11105f) S10<=(28)(488612098,2.11267e-21f) 

 v_mul_i32_i24  v6, s5, v18                                // 00000D68: 120C2405


 v_and_b32     v5, s6, v11                                 // 00000D6C: 360A1606


 s_mulk_i32    s4, 0x000f                                  // 00000D70: B804000F
S4<=(4915200) scc<=(0) 

 v_mul_i32_i24  v8, v16, v17                               // 00000D74: 12102310


 s_mov_b32     s3, s7                                      // 00000D78: BE830307
S3<=(1900544) 

 s_endpgm                                                  // 00000D7C: BF810000

